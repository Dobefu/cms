name: CI

on:
  push:
    branches: ["*"]
    tags: ["v*"]
  pull_request:
    branches: ["*"]

permissions:
  contents: write

jobs:
  build-nextjs:
    name: "Build NextJS"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: "./.nvmrc"

      - name: Create a .env file
        run: |
          touch .env
          echo "APP_NAME=\"${{ vars.APP_NAME }}\"" >> .env

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-

      - name: Install the latest version of Corepack
        run: npm i -g corepack@latest

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: pnpm install

      - name: Build
        run: pnpm build
    env:
      GIT_HASH: ${{ github.sha }}

  build-golang:
    name: "Build Golang"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "./api/go.mod"
          cache-dependency-path: ./api/go.sum

      - name: Install dependencies
        working-directory: ./api
        run: go get .

      - name: Build
        working-directory: ./api
        run: go build -v ./...

  test-nextjs:
    name: "Test NextJS"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: "./.nvmrc"

      - name: Create a .env file
        run: |
          touch .env
          echo "APP_NAME=\"${{ vars.APP_NAME }}\"" >> .env

      - name: Install the latest version of Corepack
        run: npm i -g corepack@latest

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: pnpm install

      - name: Run tests
        run: pnpm coverage

      - name: Delete the .env file after tests are completed
        run: rm .env

      - uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage/

  test-golang:
    name: "Test Golang"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "./api/go.mod"
          cache-dependency-path: ./api/go.sum

      - name: Create a test results directory
        working-directory: ./api
        run: mkdir test-results

      - name: Run tests
        working-directory: ./api
        run: |
          go test "./..." -coverprofile="test-results/coverage.out" -covermode=count
          go test "./..." -coverprofile="coverage.out" -covermode=count -json > test-report.out
          grep -v "test_utils.go" coverage.out > coverage.tmp
          grep -v "test_utils.go" test-report.out > test-report.tmp
          mv coverage.tmp test-results/coverage.out
          mv test-report.tmp test-results/test-report.out

      - uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: api/test-results/

  sonar-scan:
    name: "SonarQube Scan"
    needs: [test-nextjs, test-golang]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v4

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
